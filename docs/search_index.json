[
["index.html", "ggplot2 examples 1 ggplot2 packages", " ggplot2 examples James 1 ggplot2 packages The below packages are required to to recreate the example plots in this reference. They also represent a helpful list of useful packages for extending ggplot2 # Tidyverse includes ggplot2 library(tidyverse) # Scales library(scales) # theme packages give you more theme options than base ggplot2 library(ggthemes) library(hrbrthemes) library(cowplot) # package can be used to easily install system fonts into R (use funtion font_import) library(extrafont) "],
["distribution-plots.html", "2 Distribution Plots 2.1 histogram 2.2 Density plot (overlaying distributions)", " 2 Distribution Plots 2.1 histogram # generate a random normally distributed variable normal &lt;- tibble(variable = rnorm(100000, 0, 1)) # histogram plot # ggplot is the first command for any ggplot2 plot. data and aestetics aes() # can be defined here or in any individual geom_*(function). Histograms only # take &quot;x&quot; argument unless normalizing ggplot(data = normal, aes(x = variable)) + # geom_histogram draws a histogram # fill and color can also be used in the aes() command to map them to data geom_histogram(binwidth = 0.25, fill = &quot;lightblue&quot;, color = &quot;darkblue&quot;) + # add a vertical line at the computed mean (can be any number), linetype controls #the styling of the line in this case to dashed. geom_vline(aes(xintercept = variable %&gt;% mean()), color = &quot;red&quot;, linetype = &quot;dashed&quot;) + #the annotate function adds any geom to the plot, here we # use text to put a label on the graph at specified x and y coords. annotate(&quot;text&quot;, x = -1.5, y = 7500, label = &quot;mean&quot;) + # here we use the annotate geom with segment to create an arrow pointing from # the label to the line annotate(&quot;segment&quot;, x = -1.18, y = 7400, xend = -0.1, yend = 6000, size = 0.6, color = &quot;#404040&quot;, arrow = arrow(length = unit(0.15, &quot;cm&quot;)), lineend = &quot;butt&quot;, linejoin = &quot;mitre&quot;) + # themes change the overall look of the plot. these can also be modified # further if need be (also can use packaged themes like theme_economist) theme_minimal() + # basic title and lables can be done with xlab ylab and ggtitle ggtitle(&quot;Normal distribution&quot;) + xlab(&quot;normally distributed variable&quot;) + # more options are availble in the scale*() functions like labels # function which can be used to put commas, percentages, etc from the # scales::label() function scale_y_continuous(name = &quot;&quot;, labels = comma) Figure 2.1: Histogram of a normally distributed variable 2.2 Density plot (overlaying distributions) # create a bimodal distribution plot1 &lt;- tibble(variable = rnorm(100000, 10, 5)) %&gt;% bind_rows(tibble(variable = rnorm(20000, 0, 2))) %&gt;% mutate(set = &quot;set A&quot;) # second non-overlapping distribution plot2 &lt;- tibble(variable = rnorm(100000, 30, 8)) %&gt;% mutate(set = &quot;set B&quot;) # density plot # append the two plots together and pipe them into the plot bind_rows(plot1, plot2) %&gt;% # ggplot is the first command for any ggplot2 plot. data and aestetics aes() # can be defined here or in any individual geom_*(function). Density plots # only take x variables ggplot(aes(x = variable)) + # we set both fill and color to the grouping variable to create two density # plots that overlay each other. Alpha controls the transparency of the plot # in this case letting us see both distributions. geom_density(aes(fill = set, color = set), alpha = 0.3) + # plot colors, need to set both fill and color because this plot uses both. # if we only set one color the other would default to ggplot2 pallete. scale_fill_brewer(type = &quot;qual&quot;, palette = &quot;Accent&quot;) + scale_color_brewer(type = &quot;qual&quot;, palette = &quot;Accent&quot;)+ # its often better to directly label the plot instead of relying on a # legend. The annotate function adds any geom to the plot, here we # use text to put labels on the graph at specified x and y coords. annotate(&quot;text&quot;, x = 7, y = 0.025, label = &quot;Set A&quot;) + annotate(&quot;text&quot;, x = 30, y = 0.018, label = &quot;Set B&quot;) + # theme_cowplot comes from the cowplot package. In this theme function # font family and font size can be adjusted using arguments theme_cowplot(font_family = &quot;IBM Plex Sans Light&quot;, font_size = 12) + # Because the plot is directly labeled, we dont need a legend. Theme # objects can be modified with the theme() funtion theme(legend.position = &quot;none&quot;) + # By default R leaves space between the axis and the data visualization. # by setting scale_y_continuous() expand to zero, we can eliminate this. # Breaks can be set manually, howeer, the pretty_breaks() can make nice # even breaks easily. scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0, 0), breaks = pretty_breaks(5)) + # basic title and axis lables can be done with xlab ylab and ggtitle ggtitle(&quot;Overlaid Density Plot&quot;) Figure 2.2: Overlaid density plot of two distributions "],
["line-plots.html", "3 Line plots 3.1 connected dot time series 3.2 High freqeuncy time series", " 3 Line plots 3.1 connected dot time series # generate random time series of series 1 and series 2 time_series &lt;- bind_rows( tibble(year = seq(1990, 2020, 1)) %&gt;% mutate(series = &quot;A&quot;, variable = (year/10) + runif(31,1,2)), tibble(year = seq(1990, 2020, 1)) %&gt;% mutate(series = &quot;B&quot;, variable = (year/10) + runif(31,1,2)) ) # time series plot # ggplot is the first command for any ggplot2 plot. data and aestetics aes() # can be defined here or in any individual geom_*(function) # &quot;color&quot; controls the color of lines, &quot;fill&quot; controls color of fill. # by assigning color to a variable in the aes() function we get a different # line for each series ggplot(data = time_series, aes(x = year, y = variable, color = series)) + # geom line takes an x and y variable (defined above) and plots a line geom_line() + # ploting the points on the line show where the real data points are geom_point() + # there are many ways to color plots. If colors are defined meaningfully # as either a way to distinguish between different vars or to show value # colors must be modified using a scale_color/fill_* command. # scale_color_brewer allows you to use built in color palettes scale_color_brewer(type = &quot;qual&quot;, palette = &quot;Blues&quot;) + # themes change the overall look of the plot. these can also be modified # further if need be (also can use packaged themes like theme_economist) theme_bw() + # dont need a label for year because it is self evident xlab(&quot;&quot;)+ # title the plot, can also have a subtitle ggtitle(label = &quot;Time series plot&quot;, subtitle = &quot;series A and B&quot;) Figure 3.1: Example of a line plot of random time series data 3.2 High freqeuncy time series # function to generate high-frequency time-series data drunkards_walk &lt;- function(x, y, za, zb) { # basic markov chain that creates a vector starting at x, of length y, # and with a maximum of -za + zb variation from one number to next, # za and zb control the overall slope values &lt;- x for (n in 1:(y - 1)) { x &lt;- x + runif(1, za, zb) values &lt;- rbind(values, x) } out &lt;- values %&gt;% as.vector() } # generate a set of time series data over 1500 days time_series &lt;- tibble(date = seq.Date(from = as.Date(&quot;1/1/2010&quot;, &quot;%m/%d/%Y&quot;), by = &quot;day&quot;, length.out = 1500), series_a = drunkards_walk(runif(1,50,300), 1500, -3, 3.3), series_b = drunkards_walk(runif(1,50,300), 1500, -6, 5.8), series_c = drunkards_walk(runif(1,50,300), 1500, -10, 9.8)) %&gt;% pivot_longer(c(&quot;series_a&quot;, &quot;series_b&quot;, &quot;series_c&quot;), names_to = &quot;series&quot;, values_to = &quot;variable&quot;) %&gt;% mutate(series = str_replace(series, &quot;_&quot;, &quot; &quot;)) # filter just the end values to key line labels onto time_series_end &lt;- time_series %&gt;% filter(date == max(date)) # plot ggplot(data = time_series, aes(x = date, y = variable, color = series)) + # geom line takes an x and y variable (defined above) and plots a line geom_line() + # there are many ways to color plots. If colors are defined meaningfully # as either a way to distinguish between different vars or to show value # colors must be modified using a scale_color/fill_* command. # scale_color_brewer allows you to use built in color palettes scale_color_brewer(type = &quot;qual&quot;, palette = &quot;Dark2&quot;) + # By default R leaves space between the axis and the data visualization. # by setting scale_y_continuous() expand to zero, we can eliminate this. scale_y_continuous(name = &quot;&quot;, expand = c(0, 0), breaks = pretty_breaks(5), sec.axis = dup_axis( breaks = time_series_end$variable, labels = c(&quot;series a&quot;, &quot;series b&quot;, &quot;series c&quot;), name = NULL)) + # the date variable is in a date format which requires the use of # scale_x_date scale_x_date(name = &quot;&quot;, expand = c(0, 0), breaks = pretty_breaks(9)) + # theme_modern_rc comes from the hrbrthemes package. In this theme function # font family and font size can be adjusted using arguments. theme_modern_rc(base_size = 10) + # Because the plot is directly labeled, we dont need a legend. # Right y axis line and ticks are also inappropriate here because of labels. # Theme objects can be modified with the theme() funtion theme(legend.position = &quot;none&quot;, axis.line.y.right = element_blank(), axis.ticks.y.right = element_blank()) + # title the plot, can also have a subtitle ggtitle(label = &quot;High frequency time series data&quot;, subtitle = &quot;with line end labels&quot;) Figure 3.2: Example of multiple high frequency times series data "],
["scatterplots.html", "4 Scatterplots", " 4 Scatterplots # create a random(ish), correlated dataset scatter_data &lt;- tibble(x = seq(100, 1100, 5), y = seq(100, 600, 2.5)) %&gt;% mutate(x = rnorm(201, x, 100), y = rnorm(201, y, 50)) # scatterplot # ggplot is the first command for any ggplot2 plot. data and aestetics aes() # can be defined here or in any individual geom_*(function) ggplot(data = scatter_data, aes(x = x, y = y)) + # scatterplots can be created using the geom_point shape geom_point(shape = 1, ## ggplot has 20 built in shapes called by integer size = 2, color = &quot;darkblue&quot;, alpha = 0.5) + ## alpha sets transparency 1 = solid, 0 = invisible # trendlines can be added to the plot with geom_smooth. By default this will # give you a loess (nonparametric fit) with error bars but this can be changed # here we use &quot;lm&quot; or &quot;linear model&quot; to fit a line geom_smooth(method = &quot;lm&quot;) + # themes change the overall look of the plot. these can also be modified # further if need be (also can use packaged themes like theme_economist) theme_bw() + # title the plot, can also have a subtitle ggtitle(label = &quot;Scatterplot&quot;, subtitle = &quot;with trend line&quot;) ## `geom_smooth()` using formula &#39;y ~ x&#39; Figure 4.1: Scatterplot of psuedorandom correlated variables "],
["barplot.html", "5 Barplot", " 5 Barplot # create dummy categorical data categorical_data &lt;- tibble(fruit = c(&quot;apples&quot;, &quot;pears&quot;, &quot;banannas&quot;, &quot;pinapples&quot;, &quot;cherries&quot;, &quot;peaches&quot;), quantity = c(10, 15, 30, 45, 60, 75)) %&gt;% # for categorical graphs its often useful to make the category a factor. This lets # you control the order by which it appears on the plot. Below we use fct_reorder # from the forcats package to reorder the fruit variable by the quantity of fruit. mutate(fruit = forcats::fct_reorder(fruit, quantity)) # barchart # ggplot is the first command for any ggplot2 plot. data and aestetics aes() # can be defined here or in any individual geom_*(function) ggplot(data = categorical_data, aes(x = fruit, y = quantity)) + # geom_bar takes a quantity from a &quot;tidy&quot; dataset, here we just have one # category-value pair so we use geom_col instead geom_col(fill = &quot;steelblue&quot;) + # themes change the overall look of the plot. these can also be modified # further if need be (also can use packaged themes like theme_economist) theme_minimal() + # coord_flip flips the x and y axis which is useful for making bar charts # with lots of values. Omit to make normal bar chart coord_flip() + xlab(&quot;&quot;)+ # no label # title the plot, can also have a subtitle ggtitle(label = &quot;bar plot&quot;, subtitle = &quot;horizontal variant&quot;) Figure 5.1: Bar chart of dummy fruit data "]
]
